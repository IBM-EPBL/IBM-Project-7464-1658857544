# -*- coding: utf-8 -*-
"""imageimport.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1unu_n0LQXKpnRS_TGBiEqPWM1uxKvkW1
"""

from google.colab import drive
drive.mount('/content/drive')

!unzip "/content/drive/MyDrive/Nutrition Image Analysis using CNN and Rapid API-20221103T055609Z-001.zip"

pip install keras

"""Import The ImageDataGenerator Library


"""

from keras.preprocessing.image import ImageDataGenerator

"""Configure ImageDataGenerator Class"""

train_datagen=ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)
test_datagen=ImageDataGenerator(rescale=1./255)

"""Apply Image DataGenerator Functionality To Trainset And Testset"""

x_train=train_datagen.flow_from_directory(r'/content/Nutrition Image Analysis using CNN and Rapid API/Dataset/TRAIN_SET',target_size=(64,64),batch_size=32,color_mode='rgb',class_mode='sparse')
x_test=train_datagen.flow_from_directory(r'/content/Nutrition Image Analysis using CNN and Rapid API/Dataset/TEST_SET',target_size=(64,64),batch_size=32,color_mode='rgb',class_mode='sparse')

print(x_train.class_indices)

print(x_test.class_indices)

from collections import Counter as c
c(x_train .labels)

"""Importing the Libraries:"""

import numpy as np
import tensorflow
from tensorflow.keras.models import Sequential
from tensorflow.keras import layers
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout
from keras.preprocessing.image import ImageDataGenerator

"""Initializing The Model"""

model = Sequential()

"""Adding CNN Layers"""

classifier = Sequential()
classifier.add(Conv2D(32, (3, 3), input_shape=(64, 64, 3), activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))

classifier.add(Conv2D(32, (3, 3), activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))

classifier.add(Flatten())

"""Adding Dense Layers"""

classifier.add(Dense(units=128, activation='relu'))
classifier.add(Dense(units=5, activation='softmax'))

classifier.summary()

"""Configure The Learning Process"""

classifier.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

"""Train The Model"""

classifier.fit_generator(
    generator=x_train, steps_per_epoch = len(x_train),
    epochs=20, validation_data=x_test, validation_steps = len(x_test)
)

"""Save The Model"""

classifier.save('nutrition.h5')

"""Test The Model"""

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
model = load_model("nutrition.h5")

img = image.load_img("/content/Nutrition Image Analysis using CNN and Rapid API/Dataset/TEST_SET/ORANGE/n07749192_1081.jpg",
grayscale=False,target_size=(64,64))

x = image.img_to_array(img)
x = np.expand_dims(x, axis = 0)
pred = np.argmax(model.predict(x), axis=-1)
pred

index=['APPLES', 'BANANA', 'ORANGE', 'PINEAPPLE', 'WATERMELON']
result=str(index[pred[0]])
result

"""Importing Libraries"""

from flask import Flask, render_template, request
import os
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import requests

"""Creating our flask application and loading our model by using the load_model method"""

app = Flask(__name__, template_folder="templates")
model = load_model('/content/nutrition.h5')
print("Loaded model from disk")

"""Routing To The Html Page"""

@app.route('/')
def home():
  return render_template('/content/drive/MyDrive/Nutrition Analysis Using Image Classification/Flask/templates/home.html')

@app.route('/image1', methods=['GET', 'POST'])
def image1():
  return render_template("/content/drive/MyDrive/Nutrition Analysis Using Image Classification/Flask/templates/image.html")

@app.route('/predict', methods=['GET', 'POST'])
def launch():
  if request.method=='POST':
    f = request.files['file']
    basepath = os.path.dirname('__file__')
    filepath = os.path.join(basepath, "uploads", f.filename)
    f.save(filepath)

    img = image.load_img(filepath, target_size=(64,64))
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)

    pred = np.argmax(model.predict(x), axis=1)
    print("prediction", pred)
    index = ['APPLES', 'BANANA', 'ORANGE', 'PINEAPPLE', 'WATERMELON']

    result = str(index[pred[0]])

    x = result
    print(x)
    result = nutrition(result)
    print(result)

    return render_template("/content/drive/MyDrive/Nutrition Analysis Using Image Classification/Flask/templates/0.html", showcase=(result), shoecase1=(x))

def nutrition(index):

  url = "https://calorieninjas.p.rapidapi.com/v1/nutrition"
  
  querystring = {"query":index}

  headers = {
    "X-RapidAPI-Key": "521c31f652msh1c7495bea1f7905p109714jsn0aa70be1becb",
    "X-RapidAPI-Host": "calorieninjas.p.rapidapi.com"
    }

  response = requests.request("GET", url, headers=headers, params=querystring)

  print(response.text)
  return response.json()['items']

if __name__ == "__main__":
  app.run(debug=False)

